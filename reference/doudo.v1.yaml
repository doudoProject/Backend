openapi: 3.0.0
info:
  title: Doudo
  version: '1.0'
  description: |
    ## API Documentation for Project Doudo
  contact:
    name: SeongCheol Park
    email: gorae02@gmail.com
  termsOfService: Not published yet
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'https://doudo.run.goorm.io'
    description: Dev Server
  - url: 'https://api.doudo.kr'
    description: AWS Server
paths:
  /v1/auth/signup:
    post:
      summary: Sign Up
      operationId: post-v1-auth-signup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  userInfo:
                    type: object
                    properties:
                      permission:
                        type: number
                      _id:
                        type: string
                      userid:
                        type: string
                      email:
                        type: string
                      password:
                        type: string
                      name:
                        type: string
                      __v:
                        type: number
              examples:
                예제 1:
                  value:
                    success: true
                    userInfo:
                      permission: 0
                      _id: 5fa94b8a04c8320d5a345865
                      userid: user1
                      email: gorae02@gmail.com
                      password: $2a$10$5V4WRQdyvaau7B0l/NX7O.DS1xHw7ysESlm9fMGwi5oMSwXuHrhLe
                      name: 유저1
                      __v: 0
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: string
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
        description: ''
      security: []
      description: Sign Up
  /v1/auth/signin:
    post:
      summary: Sign In
      operationId: post-v1-auth-signin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type:
                      - string
                      - 'null'
                  accessToken:
                    type:
                      - string
                      - 'null'
                  expiresIn:
                    type: integer
              examples:
                로그인 실패:
                  value:
                    success: false
                    message: 아이디나 패스워드가 일치하지 않습니다
                로그인 성공:
                  value:
                    success: true
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmYjY2ZDRiMDdlNDE1MGE4MTA4YmNiMCIsIm5hbWUiOiLsnKDsoIAxIiwiY291cGxlIjoiNWZiYTNkYWE3NWUxMzkwODY1MTMyNDA4IiwiaWF0IjoxNjA2MDUxMDYzLCJleHAiOjE2MDYwNTgyNjN9.BcJGsSeLRTqBPjk9rlJTXy2isMHuew_lQSrNyzHsVes
                    expiresIn: 7200
      description: Sign In
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: string
                password:
                  type: string
            examples:
              예제 1:
                value:
                  userid: user1
                  password: string
      security: []
      tags:
        - Auth
  /v1/couple:
    post:
      summary: Create Couple
      operationId: post-v1-couple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  coupleInfo:
                    $ref: '#/components/schemas/Couple'
              examples:
                example-1:
                  value:
                    success: true
                    coupleInfo:
                      coupleid: string
                      name: string
                      member:
                        - string
                      todo:
                        - string
                      event:
                        - name: string
                          datetime:
                            allday: true
                            start: string
                            end: string
                          author: string
      tags:
        - Couple
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coupleid:
                  type: string
                name:
                  type: string
                  description: '커플명, 없으면 기본값 ''커플명을 입력해주세요'''
              required:
                - coupleid
      description: 전달된 아이디와 이름으로 커플을 만듭니다
      parameters:
        - schema:
            type: string
            default: application/json
          in: header
          description: ''
          name: Content-Type
          required: true
    patch:
      summary: Modify Couple
      operationId: patch-v1-couple
      responses:
        '200':
          description: OK
      tags:
        - Couple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Couple'
        description: ''
    delete:
      summary: Delete Couple
      operationId: delete-v1-couple
      responses:
        '200':
          description: OK
      tags:
        - Couple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: ''
      description: 자신의 커플을 삭제합니다.
    get:
      summary: Get Couple
      operationId: get-v1-couple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Couple'
              examples:
                example-1:
                  value:
                    name: string
                    member:
                      - permission: 0
                        _id: 5fb66d4b07e4150a8108bcb0
                        userid: user1
                        email: string
                        password: $2a$10$Rcz4wae0PGqGZ7EpgTToIeHaIBlmxsJ0w9X.Lt1cSf3DIumcBkQte
                        name: 유저1
                        __v: 0
                        couple: 5fba3daa75e1390865132408
                      - permission: 0
                        _id: 5fb6881def338a0ea302a0ca
                        userid: user2
                        email: strin2g
                        password: $2a$10$a57xsdScYQSwQ.icnsKYvuJR4EPlC8Y7CG/yklfT0v51xDHll2ZZ.
                        name: string
                        __v: 0
                        couple: 5fba3daa75e1390865132408
                    _id: 5fba3daa75e1390865132408
                    todo: []
                    coupleid: string
                    event: []
                    __v: 2
      description: |-
        자신의 커플 정보를 가져옵니다
        >Path Param 있음<br>
        /v1/couple/<b>:coupleid</b>
      parameters: []
      tags:
        - Couple
    parameters: []
  /v1/couple/join:
    post:
      summary: Join Couple by Id
      operationId: post-v1-couple-join
      responses:
        '200':
          description: OK
      description: coupleid 로 커플에 참가합니다
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coupleid:
                  type: string
  /v1/user:
    get:
      summary: Get User Info
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    permission: 0
                    _id: 5fb66d4b07e4150a8108bcb0
                    userid: user1
                    email: string
                    name: 유저1
                    __v: 0
                    couple:
                      name: string
                      member:
                        - 5fb66d4b07e4150a8108bcb0
                        - 5fb6881def338a0ea302a0ca
                      _id: 5fba3daa75e1390865132408
                      todo:
                        - done: false
                          _id: 5fba6a4dddd2c40aae2bf3de
                          description: fsdfsfesfesafsaefa
                          duedate: '2020-11-22T00:00:00.000Z'
                        - done: false
                          _id: 5fba6aafddd2c40aae2bf3e1
                          description: 투두 추가 테스트
                          duedate: '2020-11-28T00:00:00.000Z'
                      coupleid: string
                      event: []
                      __v: 4
      operationId: get-v1-user
  /v1/todo:
    get:
      summary: Get Todolist
      tags:
        - Todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  '':
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
              examples:
                example-1:
                  value:
                    - done: false
                      _id: 5fba6a4dddd2c40aae2bf3de
                      description: fsdfsfesfesafsaefa
                      duedate: '2020-11-22T00:00:00.000Z'
                    - done: false
                      _id: 5fba6aafddd2c40aae2bf3e1
                      description: 투두 추가 테스트
                      duedate: '2020-11-28T00:00:00.000Z'
      operationId: get-v1-todo
    post:
      summary: Add Todo List
      operationId: post-v1-todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  todo:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
              examples:
                example-1:
                  value:
                    success: true
                    affected:
                      done: false
                      _id: 5fec8b29c989de3b86794e51
                      description: string
                      duedate: null
      tags:
        - Todo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                duedate:
                  type: string
                  description: 'YYYY-mm-dd HH:ii:ss'
            examples:
              example-1:
                value:
                  description: Todo 추가 테스트
                  duedate: '2020-11-22 00:00:00'
    delete:
      summary: Delete Todo
      operationId: delete-v1-todo
      responses:
        '200':
          description: OK
      description: Delete Todo by objectid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      tags:
        - Todo
    put:
      summary: Modify Todo
      operationId: put-v1-todo
      responses:
        '200':
          description: OK
      tags:
        - Todo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
            examples:
              example-1:
                value:
                  _id: '123456789'
                  description: string
                  done: true
                  duedate: string
        description: ''
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        아직 그룹이 없는 경우:
          permission: 0
          userid: user1
          email: string
          password: $2a$10$Rcz4wae0PGqGZ7EpgTToIeHaIBlmxsJ0w9X.Lt1cSf3DIumcBkQte
          name: 유저1
          couple:
            $oid: 5fba3daa75e1390865132408
        그룹 있는경우:
          userid: user1
          email: email@email.com
          password: some_encrypted_string
          name: 이름
          group: 1
          permission: 0
      properties:
        userid:
          type: string
        email:
          type: string
        password:
          type: string
        name:
          type: string
        couple:
          $ref: '#/components/schemas/Couple'
        permission:
          type: integer
          default: 0
      required:
        - userid
        - email
        - password
        - name
    Couple:
      title: Couple
      type: object
      x-examples: {}
      properties:
        coupleid:
          type: string
        name:
          type: string
        member:
          type: array
          items:
            $ref: '#/components/schemas/User'
        todo:
          type: array
          items:
            type: string
        event:
          type: array
          items:
            $ref: '#/components/schemas/CalendarEvent'
      required:
        - coupleid
        - name
        - member
    CalendarEvent:
      title: CalendarEvent
      type: object
      properties:
        name:
          type: string
        datetime:
          description: ''
          type: object
          required:
            - allday
            - start
            - end
          properties:
            allday:
              type: boolean
              description: allday일 경우 start로 해당일 내내 이벤트
            start:
              type: string
              description: 'YYYY-MM-DD HH:ii:ss'
            end:
              type: string
              description: 'YYYY-MM-DD HH:ii:ss'
        author:
          type: string
          description: 작성자 아이디
      required:
        - name
        - author
    Todo:
      title: Todo
      type: object
      properties:
        description:
          type: string
        done:
          type: boolean
        duedate:
          type: string
          description: 'YYYY-mm-dd HH:ii:ss'
      required:
        - description
  securitySchemes:
    Access Token:
      name: Authorization
      type: apiKey
      in: header
      description: Bearer access_token_token
tags:
  - name: Auth
  - name: Couple
  - name: Todo
  - name: User
security:
  - Access Token: []
